capture.output(
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
)
)
)
rm(fit44)
invisible(
capture.output(
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
)
)
)
fit44
invisible(
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
)
)
capture.output(
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
)
)
invisible(
capture.output(
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
)
)
)
invOut <- function(input) {
invisible(capture.output(input))
}
fit44 <-
regsubsets(
cena ~ .,
dane[trening44,],
nvmax = nPred(dane[trening44,]),
method = "forward"
) %>% invOut()
rm(invOut)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
library(knitr)
library(pander)
opts_chunk$set(
comment = "",
fig.width = 12,
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
tidy.opts = list(
keep.blank.line = TRUE,
width.cutoff = 150
),
options(width = 150)
)
p <- nPred(dane)
K <- 10
n <- 100
data_frame(p = p, K = K, n = n)
data_frame(p = p, K = K, n = n) %>% pandoc.table()
data_frame(p = p, K = K, n = n) %>% pandoc.table() %>% pander()
htmltools::tagList(rmarkdown::html_dependency_font_awesome()
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
tags$hr
tags$hr()
tags$br()
data_frame(`k=100` = 1)
plot(cvRidge)
cvRidge$cvm
cvRidge$cvm %>% sqrt()
plot(cvRidge %>% sqrt())
cvRidge$lambda
cvRidge$lambda %>% log()
library(knitr)
library(pander)
opts_chunk$set(
comment = "",
fig.width = 12,
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
tidy.opts = list(
keep.blank.line = TRUE,
width.cutoff = 150
),
options(width = 150)
)
plot(sqrt(cvm)~log(lambda), cvRidge)
plot.cv.glmnet()
plot.cv.glmnet(sqrt(cvm)~log(lambda), cvRidge)
cvRidge$lambda
cvRidge$cvm
plot(sqrt(cvRidge$cvm),log(cvRidgelambda))
plot(sqrt(cvRidge$cvm),log(cvRidge$lambda))
plot.cv.glmnet(cvRidge)
plot(cvRidge)
plot(cvRidge, sign.lambda = -1)
fit41 <- regsubsets(cena~., dane, nvmax = nPred(dane))
fit42 <- regsubsets(cena~., dane, nvmax = nPred(dane), method = "forward")
fit43 <- regsubsets(cena~., dane, nvmax = nPred(dane), method = "backward")
plot(fit43)
fit45 <- glmnet(x, y, alpha = 0)
fit45 <- glmnet(x, y, response = "mae", alpha = 0)
cvTest <- cv.glmnet(x, y, response = "mae", alpha = 0)
cvTest <- cv.glmnet(x, y, type.measure = "mae", alpha = 0)
plot(cvTest)
cvTest <- cv.glmnet(x, y, type.measure = "deviance", alpha = 0)
plot(cvTest)
cvTest <- cv.glmnet(x, y, type.measure = "mse", alpha = 0)
plot(cvTest)
cvTest <- cv.glmnet(x, y, type.measure = "rmse", alpha = 0)
cvTest <- cv.glmnet(x, y, type.measure = "class", alpha = 0)
cvTest <- cv.glmnet(x, y, type.measure = "auc", alpha = 0)
expression(log(lambda))
print(Petal.Length~Petal.Width, iris, xlab = expression("wielkość [m"^{2}*"]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("wielkość [m"^{2}*"]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log{lambda})
plot(Petal.Length~Petal.Width, iris, xlab = expression("log("{lambda}"")
plot(Petal.Length~Petal.Width, iris, xlab = expression("log("(lambda)"")
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))[])
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))[])
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))"[-]")
plot(Petal.Length~Petal.Width, iris, xlab = expression(""log(lambda))"[-]")
plot(Petal.Length~Petal.Width, iris, xlab = expression("log(lambda))[-]")
plot(Petal.Length~Petal.Width, iris, xlab = expression("log(lambda))[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("log("lambda"))[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("log("lambda"))[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("log(lambda))[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))"[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))[-]))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda))[]))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)[]))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)"[]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("log("lambda")[]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)[]))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)[-]))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)["-"]))
?plotmath
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)~"[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)*"[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("wielkość [m"^{2}*"]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression("wielkość [m"^{2}~"]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda) "[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)*"[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)" [-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)"[ -]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)*"[-]"))
plot(Petal.Length~Petal.Width, iris, xlab = expression(log(lambda)~"[-]"))
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = "błąd średniokwadratowy"
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = "błąd średniokwadratowy"
)
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = "błąd średniokwadratowy"
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = "błąd średniokwadratowy"
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = "błąd średniokwadratowy"
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0.5, 0.5)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0.5, 0.5, 0.5)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(1, 1, 1)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(1, 1, 1)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0, 0, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(2, 2, 2)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(2, 2, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(2, 0, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0, 0, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0, 1, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(0, 0, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(1, 1, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(2, 1, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(3, 1, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
par(mfrow = c(2, 1))
plot(
cvRidge,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]"),
mgp = c(2.5, 1, 0)
)
plot(
cvLasso,
xlab = expression(log(lambda)~"[-]"),
ylab = expression("błąd średniokwadratowy [PLN"^{2}*"]")
)
shiny::runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
install.packages("shinythemes")
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
devtools::install_github("trestletech/shinyTable")
runApp(system.file("examples/01-simple", package="shinyTable"))
shiny::runApp(system.file("examples/01-simple", package="shinyTable"))
shiny::runApp('tuatara_app')
shiny::runApp('tuatara_app')
library(shinyTable)
remove.packages("shinyTable")
shiny::runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny", force = TRUE)
shiny::runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
runApp('tuatara_app')
remove.packages("shiny")
install.packages("shiny")
install.packages("shiny")
