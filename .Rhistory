pred <- test44[, names(coefi)]%*%coefi
mean((dane$cena[-trening44]-pred)^2)
}
)
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(fit44$rss[-1]/9000), col = "red", pch = 19, type = "b")
legend("topright", legend = c("Trening", "Walidacja"), col = c("red", "black"), pch = 19)
test44 <- model.matrix(cena~., dane[-trening44, ])
valBlad <-
1:length(dane) %>%
sapply(
function(x) {
coefi <- coef(fit44, id = x)
pred <- test44[, names(coefi)]%*%coefi
mean((dane$cena[-trening44]-pred)^2)
}
)
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(fit44$rss[-1]/9000), col = "red", pch = 19, type = "b")
legend("topright", legend = c("Trening", "Walidacja"), col = c("red", "black"), pch = 19)
fit44$call
fit44$call[[2]]
set.seed(44)
trening44 <- sample(1:nrow(dane), 5000)
fit44 <- regsubsets(cena~., dane[trening44, ], nvmax = 11, method = "forward")
test44 <- model.matrix(cena~., dane[-trening44, ])
valBlad <-
1:length(dane) %>%
sapply(
function(x) {
coefi <- coef(fit44, id = x)
pred <- test44[, names(coefi)]%*%coefi
mean((dane$cena[-trening44]-pred)^2)
}
)
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(fit44$rss[-1]/5000), col = "red", pch = 19, type = "b")
legend("topright", legend = c("Trening", "Walidacja"), col = c("red", "black"), pch = 19)
set.seed(44)
trening44 <- sample(1:nrow(dane), 9000)
fit44 <- regsubsets(cena~., dane[trening44, ], nvmax = 11, method = "forward")
test44 <- model.matrix(cena~., dane[-trening44, ])
valBlad <-
1:length(dane) %>%
sapply(
function(x) {
coefi <- coef(fit44, id = x)
pred <- test44[, names(coefi)]%*%coefi
mean((dane$cena[-trening44]-pred)^2)
}
)
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(fit44$rss[-1]/9000), col = "red", pch = 19, type = "b")
legend("topright", legend = c("Trening", "Walidacja"), col = c("red", "black"), pch = 19)
sample(rep(1:10), length = nrow(dane))
sample(rep(1:10, length = nrow(dane))
sample(rep(1:10, length = nrow(dane)))
sample(rep(1:10, length = nrow(dane))) %>% table()
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
cvBledy <-
1:10 %>%
sapply(
function (k) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
mapply(
function(BEST.FIT, K, i) {
pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
mean((dane$cena[folds==K]-pred)^2)
},
best.fit, k, 1:length(dane)
)
}
)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
cvBledy <-
1:10 %>%
sapply(
function (k) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
mapply(
function(K, i) {
pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
mean((dane$cena[folds==K]-pred)^2)
},
k, 1:length(dane),
MoreArgs = list(BEST.FIT = best.fit)
)
}
)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 19)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
cvBlad[k, i] <- mean((dane$cena[folds==K]-pred)^2)
}
}
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 19)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict(best.fit, dane[folds==k, ], id = i)
cvBlad[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
predict.regsubsets <-
function(obiekt, dane, id, ...) {
form <- as.formula(obiekt$call[[2]])
mat <- model.matrix(form, dane)
coefi <- coef(obiekt, id = id)
mat[, names(coefi)]%*%coefi
}
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 19)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBlad[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
cvBledy
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBlad[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
cvBledy
folds
foldslength(dane)
length(dane)
best.fit <- regsubsets(cena~., dane[folds!=1, ], nvmax = 11, method = "forward")
best.fit
pred <- predict.regsubsets(best.fit, dane[folds==1, ], id = 1)
pred
mean((dane$cena[folds==1, ]-pred)^2)
mean((dane$cena[folds==1]-pred)^2)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(rmse.cv, pch = 19, type = "b")
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(
rmse.cv,
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
plot(
sqrt(valBlad),
add = TRUE
)
rmse.cv
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(
rmse.cv,
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(valBlad), col = "red", pch = 19, type = "b")
legend("topright", legend = c("10 krotna Kroswalidacja", "Walidacja"), col = c("red", "black"), pch = 19)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(
valBlad,
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(rmse.cv), col = "red", pch = 19, type = "b")
legend("topright", legend = c("10 krotna Kroswalidacja", "Walidacja"), col = c("red", "black"), pch = 19)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(rmse.cv), col = "red", pch = 19, type = "b")
legend("topright", legend = c("10 krotna Kroswalidacja", "Walidacja"), col = c("red", "black"), pch = 19)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(rmse.cv, col = "red", pch = 19, type = "b")
legend("topright", legend = c("10 krotna Kroswalidacja", "Walidacja"), col = c("red", "black"), pch = 19)
set.seed(45)
folds <- sample(rep(1:10, length = nrow(dane)))
table(folds)
# cvBledy <-
#   1:10 %>%
#   sapply(
#     function (k) {
#       best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
#       mapply(
#           function(K, i) {
#             pred <- predict(BEST.FIT, dane[folds==K, ], id = i)
#             mean((dane$cena[folds==K]-pred)^2)
#           },
#           k, 1:length(dane),
#           MoreArgs = list(BEST.FIT = best.fit)
#         )
#     }
#   )
cvBledy <- matrix(NA, 10, 11)
for (k in 1:10) {
best.fit <- regsubsets(cena~., dane[folds!=k, ], nvmax = 11, method = "forward")
for (i in 1:length(dane)) {
pred <- predict.regsubsets(best.fit, dane[folds==k, ], id = i)
cvBledy[k, i] <- mean((dane$cena[folds==k]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cvBledy, 2, mean))
# plot(
#   sqrt(valBlad),
#      ylim = c(400, 900),
#      xlab = "Rozmiar modelu",
#      ylab = "Średnia kwadratowa błędów",
#      pch = 19,
#      type = "b"
# )
# points(rmse.cv, col = "red", pch = 19, type = "b")
# legend("topright", legend = c("10 krotna Kroswalidacja", "Walidacja"), col = c("red", "black"), pch = 19)
plot(
sqrt(valBlad),
ylim = c(400, 900),
xlab = "Rozmiar modelu",
ylab = "Średnia kwadratowa błędów",
pch = 19,
type = "b"
)
points(sqrt(fit44$rss[-1]/9000), col = "red", pch = 19, type = "b")
points(rmse.cv, col = "blue", pch = 19, type = "b")
legend(
"topright",
legend = c("10 krotna Kroswalidacja", "Trening", "Walidacja"),
col = c("blue", "red", "black"),
pch = 19
)
